{
  "ver": "1.0.25",
  "uuid": "c5cbe96b-03ab-4be9-866e-800494e94000",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nmat2 R2(float angle){\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat2(c, -s, s, c);\n}\nvec2 PowZC(vec2 z, vec2 c) {\n    float zlen = sqrt(dot(z, z));\n    float t = atan(z.y, z.x);\n    float p1 = pow(zlen, c.x) * pow(2.718281828459045, -c.y*t);\n    float ex2 = log(zlen) * c.y;\n    vec2 p2 = vec2(cos(ex2), sin(ex2));\n    float ex3 = c.x * t;\n    vec2 p3 = vec2(cos(ex3), sin(ex3));\n    vec2 p2xp3 = vec2(\n        p2.x * p3.x - p2.y * p3.y,\n        p2.x * p3.y + p2.y * p3.x);\n    return p1 * p2xp3;\n}\nfloat Band(float v, float start, float end) {\n    float up = step(start, v);\n    float down = 1.0 - step(end, v);\n    return up * down;\n}\nfloat Rect(vec2 uv, float l, float b, float r, float t) {\n    float x = Band(uv.x, l, r);\n    float y = Band(uv.y, b, t);\n    return x * y;\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  uv = uv * 2. - 1.;\n  uv.y *= 540. / 390.;\n  float s = 10.0;\n  float a = 1.;\n  float b = 0.111111;\n  float scale = 2.;\n  float mask = 1.;\n  vec3 finalc = texture2D(texture, PowZC(uv, vec2(a, b)) * 0.5 + 0.5).rgb;\n  vec2 puv;\n  for (int i = 0; i < 4; ++i) {\n      uv = R2((3.141592653589793 / 45.)) * uv * scale;\n      puv = PowZC(uv, vec2(a, b));\n      mask = 1.0 - Rect(puv, -0.5, -0.5, 0.5, 0.5);\n      vec3 c = texture2D(texture, puv * 0.5 + 0.5).rgb;\n      finalc = mix(c, finalc, mask);\n  }\n  gl_FragColor = vec4(finalc, 1.0);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec2 v_uv0;\nuniform sampler2D texture;\nmat2 R2(float angle){\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat2(c, -s, s, c);\n}\nvec2 PowZC(vec2 z, vec2 c) {\n    float zlen = sqrt(dot(z, z));\n    float t = atan(z.y, z.x);\n    float p1 = pow(zlen, c.x) * pow(2.718281828459045, -c.y*t);\n    float ex2 = log(zlen) * c.y;\n    vec2 p2 = vec2(cos(ex2), sin(ex2));\n    float ex3 = c.x * t;\n    vec2 p3 = vec2(cos(ex3), sin(ex3));\n    vec2 p2xp3 = vec2(\n        p2.x * p3.x - p2.y * p3.y,\n        p2.x * p3.y + p2.y * p3.x);\n    return p1 * p2xp3;\n}\nfloat Band(float v, float start, float end) {\n    float up = step(start, v);\n    float down = 1.0 - step(end, v);\n    return up * down;\n}\nfloat Rect(vec2 uv, float l, float b, float r, float t) {\n    float x = Band(uv.x, l, r);\n    float y = Band(uv.y, b, t);\n    return x * y;\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  uv = uv * 2. - 1.;\n  uv.y *= 540. / 390.;\n  float s = 10.0;\n  float a = 1.;\n  float b = 0.111111;\n  float scale = 2.;\n  float mask = 1.;\n  vec3 finalc = texture(texture, PowZC(uv, vec2(a, b)) * 0.5 + 0.5).rgb;\n  vec2 puv;\n  for (int i = 0; i < 4; ++i) {\n      uv = R2((3.141592653589793 / 45.)) * uv * scale;\n      puv = PowZC(uv, vec2(a, b));\n      mask = 1.0 - Rect(puv, -0.5, -0.5, 0.5, 0.5);\n      vec3 c = texture(texture, puv * 0.5 + 0.5).rgb;\n      finalc = mix(c, finalc, mask);\n  }\n  gl_FragColor = vec4(finalc, 1.0);\n}"
      }
    }
  ],
  "subMetas": {}
}