{
  "ver": "1.0.25",
  "uuid": "8a4d2762-791f-4d45-8d99-2a59214e1c1a",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nuniform vec4 cc_time;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform float row;\nuniform float startCol;\nuniform float endCol;\nfloat Remap01(float a, float b, float t) {\n  return (t-a) / (b-a);\n}\nfloat Remap(float a, float b, float c, float d, float t) {\n  return Remap01(a, b, t) * (d - c) + c;\n}\nfloat squared(float value) {\n  return value * value;\n}\nfloat getAmp(float frequency) {\n  float x = frequency / 512.0;\n  float col = Remap(0., 1., startCol, endCol, x);\n  return texture2D(texture, vec2(col, row)).r;\n}\nfloat getWeight(float f) {\n  return getAmp(f);\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  uv.y = uv.y * 2.0 - 1.0;\n  float lineIntensity;\n  float glowWidth;\n  vec3 color = vec3(0.0);\n  float t = cc_time.x;\n  for (float i = 0.0; i < 5.0; i++) {\n    uv.y += (0.2 * sin(uv.x + i/7.0 - t * 0.6));\n    float col = Remap(0., 1., startCol, endCol, v_uv0.x);\n    float Y = uv.y + getWeight(squared(i) * 20.0) *\n        0.5;\n    lineIntensity = 0.4 + squared(1.6 * abs(mod(v_uv0.x + i / 1.3 + t,2.0) - 1.0));\n    glowWidth = abs(lineIntensity / (150.0 * (uv.y - 0.2)));\n    color += vec3(glowWidth * (2.0 + sin(t * 0.13)),\n                  glowWidth * (2.0 - sin(t * 0.23)),\n                  glowWidth * (2.0 - cos(t * 0.19)));\n  }\n  gl_FragColor = vec4(color, 1.0);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform UARGS {\n  float row;\n  float startCol;\n  float endCol;\n};\nfloat Remap01(float a, float b, float t) {\n  return (t-a) / (b-a);\n}\nfloat Remap(float a, float b, float c, float d, float t) {\n  return Remap01(a, b, t) * (d - c) + c;\n}\nfloat squared(float value) {\n  return value * value;\n}\nfloat getAmp(float frequency) {\n  float x = frequency / 512.0;\n  float col = Remap(0., 1., startCol, endCol, x);\n  return texture(texture, vec2(col, row)).r;\n}\nfloat getWeight(float f) {\n  return getAmp(f);\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  uv.y = uv.y * 2.0 - 1.0;\n  float lineIntensity;\n  float glowWidth;\n  vec3 color = vec3(0.0);\n  float t = cc_time.x;\n  for (float i = 0.0; i < 5.0; i++) {\n    uv.y += (0.2 * sin(uv.x + i/7.0 - t * 0.6));\n    float col = Remap(0., 1., startCol, endCol, v_uv0.x);\n    float Y = uv.y + getWeight(squared(i) * 20.0) *\n        0.5;\n    lineIntensity = 0.4 + squared(1.6 * abs(mod(v_uv0.x + i / 1.3 + t,2.0) - 1.0));\n    glowWidth = abs(lineIntensity / (150.0 * (uv.y - 0.2)));\n    color += vec3(glowWidth * (2.0 + sin(t * 0.13)),\n                  glowWidth * (2.0 - sin(t * 0.23)),\n                  glowWidth * (2.0 - cos(t * 0.19)));\n  }\n  gl_FragColor = vec4(color, 1.0);\n}"
      }
    }
  ],
  "subMetas": {}
}